<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://nadavgeva.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://nadavgeva.com/" rel="alternate" type="text/html" /><updated>2018-07-06T23:12:29-04:00</updated><id>http://nadavgeva.com/</id><title type="html">Vulkan for graphics blacksmithing</title><subtitle>My name is Nadav Geva and I'm a graphics/vizualtion software engineer at a small bio-medical startup company. In this blog I will share my adventures learning the Vulkan graphics API. Tune in roughly weekly as I build a toy renderer!</subtitle><entry><title type="html">Welcome to my Vulkan blog!</title><link href="http://nadavgeva.com/vulkan,/bio/2018/07/06/welcome-to-my-vulkan-blog.html" rel="alternate" type="text/html" title="Welcome to my Vulkan blog!" /><published>2018-07-06T22:07:15-04:00</published><updated>2018-07-06T22:07:15-04:00</updated><id>http://nadavgeva.com/vulkan,/bio/2018/07/06/welcome-to-my-vulkan-blog</id><content type="html" xml:base="http://nadavgeva.com/vulkan,/bio/2018/07/06/welcome-to-my-vulkan-blog.html">&lt;p&gt;Hi! My name is Nadav Geva. 
I am a graphics / vizualtion software engineer at a small bio-medical startup. 
While an exciting field, graphics at the bio-medical world can move slowly. 
Our main graphics API is still OpenGL 3.3, and our shaders are pretty tame, as we are mostly concerned with giving an accurate 3D perception. 
So, to better hone my graphics skill I’ve decided to learn Vulkan, the newest graphics API from the Khronos group (the makers of OpenGL).
However, since I have a full-time job and two kids, I will be using python to learn it (since, as you will see, Vulkan in native C is a gigantic amount of code).
This is possible thanks to the awesome  &lt;code class=&quot;highlighter-rouge&quot;&gt;vulkan&lt;/code&gt; python package, which gives a CFFI (C Foreign Function Interface, basiclly a way to interact with C functions in python).
It will still be a lot of code, but it saves dealing with C structs, static arrays, in\out function calls, and the other shananigans one must do to write in C.
A word of caution if you are a coming from a purely python background: Vulkan is still a low-level API. 
We will deal with raw pointers, manual memory allocation and transfer, explicit destruction of objects, and other features not commonly used in python.
If you are not familiar with how these lower level systems work, this is probably not a good place to start.
I will try and update this blog roughly weekly, as I learn and build the renderer. 
As this is going to be a toy renderer and vulkan best practices are still in flux, I aim for the code to be more pedagogigal than effecient.
In the next post, I will overview the basics of the vulkan python package!&lt;/p&gt;</content><author><name></name></author><summary type="html">Hi! My name is Nadav Geva. I am a graphics / vizualtion software engineer at a small bio-medical startup. While an exciting field, graphics at the bio-medical world can move slowly. Our main graphics API is still OpenGL 3.3, and our shaders are pretty tame, as we are mostly concerned with giving an accurate 3D perception. So, to better hone my graphics skill I’ve decided to learn Vulkan, the newest graphics API from the Khronos group (the makers of OpenGL). However, since I have a full-time job and two kids, I will be using python to learn it (since, as you will see, Vulkan in native C is a gigantic amount of code). This is possible thanks to the awesome vulkan python package, which gives a CFFI (C Foreign Function Interface, basiclly a way to interact with C functions in python). It will still be a lot of code, but it saves dealing with C structs, static arrays, in\out function calls, and the other shananigans one must do to write in C. A word of caution if you are a coming from a purely python background: Vulkan is still a low-level API. We will deal with raw pointers, manual memory allocation and transfer, explicit destruction of objects, and other features not commonly used in python. If you are not familiar with how these lower level systems work, this is probably not a good place to start. I will try and update this blog roughly weekly, as I learn and build the renderer. As this is going to be a toy renderer and vulkan best practices are still in flux, I aim for the code to be more pedagogigal than effecient. In the next post, I will overview the basics of the vulkan python package!</summary></entry></feed>